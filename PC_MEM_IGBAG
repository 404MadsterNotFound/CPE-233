`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: Cal Poly
// Engineer: Gilbert Kwa
// 
// Create Date: 01/27/2025 03:11:54 PM
// Design Name: 
// Module Name: PC_MOD
// Project Name: IG_BAG_MOD
// Target Devices: 
// Tool Versions: 
// Description: RISC-V PC, Memory, and generational unit modules all integrated
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module PC_MEM_IGBAG ( reset, PC_WE, PC_SEL, fclk, pc, ir, U_type, S_type );
    // I/O
    input reset, PC_WE, fclk;
    input wire [1:0] PC_SEL;
    output wire [31:0] pc;
    output wire [31:0] ir, U_type, S_type;

    // Wires to connect modules
    wire [31:0] jalr;
    wire [31:0] branch;
    wire [31:0] jal;
    wire [31:0] muxData;
    wire [31:0] I_type, B_type, J_type;
    
    // PC_MOD
    mux_4t1_nb  #(.n(32)) my_4t1_mux  (
        .SEL   (PC_SEL),                   
        .D0    (pc + 4), 
        .D1    (jalr), 
        .D2    (branch), 
        .D3    (jal),
        .D_OUT (muxData) );  

    reg_nb #(.n(32)) MY_REG (
        .data_in  (muxData), 
        .ld       (PC_WE), 
        .clk      (fclk), 
        .clr      (reset), 
        .data_out (pc) );

    // MEM_MOD
    Memory OTTER_MEMORY (
        .MEM_CLK   (fclk),
        .MEM_RDEN1 (1'b1), 
        .MEM_RDEN2 (1'b0), 
        .MEM_WE2   (1'b0),
        .MEM_ADDR1 (pc[15:2]),
        .MEM_ADDR2 (32'd0),
        .MEM_DIN2  (32'd0),  
        .MEM_SIZE  (2'b10),
        .MEM_SIGN  (1'b0),
        .IO_IN     (1'b0),
        .IO_WR     (),
        .MEM_DOUT1 (ir),
        .MEM_DOUT2 () ); 
    
    // IMMED_GEN MODULE
    assign I_type = {{21{ir[31]}}, ir[30:25], ir[24:20]};
    assign S_type = {{21{ir[31]}}, ir[30:25], ir[11:7]};
    assign B_type = {{20{ir[31]}}, ir[7], ir[30:25], ir[11:8], 1'b0};
    assign U_type = {ir[31:12], 12'h000};
    assign J_type = {{12{ir[31]}}, ir[19:12], ir[20], ir[30:21], 1'b0};

    // BRANCH ADDR_GEN MODULE
    wire [31:0] rs = 32'h0000000C;
    assign jal = pc-4 + J_type;
    assign branch = pc-4 + B_type;
    assign jalr = rs + I_type;

endmodule
