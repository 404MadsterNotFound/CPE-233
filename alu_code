`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 02/09/2025 07:29:42 PM
// Design Name: 
// Module Name: alu_fun
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module my_alu(
    OP_1,
    OP_2,
    alu_fun,
    result
    );
    input [31:0] OP_1;
    input [31:0] OP_2;
    input [3:0] alu_fun;
    output reg [31:0] result;
    parameter [3:0] add = 4'b0000, sub = 4'b1000, o_r = 4'b0110, an_d = 4'b0111, x_or = 4'b0100, srl = 4'b0101, sll = 4'b0001, sra = 4'b1101, slt = 4'b0010, sltu = 4'b0011, lui = 1001;
    always @ (alu_fun)
    begin
    case(alu_fun)
      add:
        begin
            result = $signed(OP_1) + $signed(OP_2);
        end
      sub:
        begin
            result = $signed(OP_1)-$signed(OP_2);
        end      
      o_r:
        begin
            result = OP_1||OP_2;
        end  
      an_d:
        begin
            result = OP_1&OP_2;
        end
      x_or:
        begin
            result = OP_1^OP_2;
        end
      srl:
        begin
            result = OP_1>>> OP_2;
        end
      sll:
        begin
            result = OP_1 <<< OP_2;
        end
      sra:
        begin
            result = $signed(OP_1) >>> $signed(OP_2);
        end
      slt:
        begin
            if ($signed(OP_1)< $signed(OP_2))begin
                result = OP_1;
            end
        end
      sltu:
        begin
            if (OP_1< OP_2)begin
                result = OP_1;
            end        
        end
      lui:
        begin
            result = OP_2 <<< 12;
        end                
     endcase   
     end
endmodule
