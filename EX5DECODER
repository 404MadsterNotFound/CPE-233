`timescale 1ns / 1ps
///////////////////////////////////////////////////////////////////////////
// Company: Ratner Surf Designs
// Engineer: James Ratner
// 
// Create Date: 01/29/2019 04:56:13 PM
// Design Name: 
// Module Name: CU_DCDR
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies:
// 
// Instantiation Template:
//
// CU_DCDR my_cu_dcdr(
//   .br_eq     (xxxx), 
//   .br_lt     (xxxx), 
//   .br_ltu    (xxxx),
//   .opcode    (xxxx),    
//   .func7     (xxxx),    
//   .func3     (xxxx),    
//   .ALU_FUN   (xxxx),
//   .PC_SEL    (xxxx),
//   .srcA_SEL  (xxxx),
//   .srcB_SEL  (xxxx), 
//   .RF_SEL    (xxxx)   );
//
// 
// Revision:
// Revision 1.00 - Created (02-01-2020) - from Paul, Joseph, & Celina
//          1.01 - (02-08-2020) - removed  else's; fixed assignments
//          1.02 - (02-25-2020) - made all assignments blocking
//          1.03 - (05-12-2020) - reduced func7 to one bit
//          1.04 - (05-31-2020) - removed misleading code
//          1.05 - (12-10-2020) - added comments
//          1.06 - (02-11-2021) - fixed formatting issues
//          1.07 - (12-26-2023) - changed signal names
//
// Additional Comments:
// 
///////////////////////////////////////////////////////////////////////////

module CU_DCDR(
   input br_eq, 
   input br_lt, 
   input br_ltu,
   input [6:0] opcode,   //-  ir[6:0]
   input func7,          //-  ir[30]
   input [2:0] func3,    //-  ir[14:12] 
   output logic [3:0] ALU_FUN,
   output logic [1:0] PC_SEL,
   output logic srcA_SEL,
   output logic [1:0] srcB_SEL, 
   output logic [1:0] RF_SEL   );
    
   //- datatypes for RISC-V opcode types
   typedef enum logic [6:0] {
        LUI    = 7'b0110111,
        AUIPC  = 7'b0010111,
        JAL    = 7'b1101111,
        JALR   = 7'b1100111,
        BRANCH = 7'b1100011,
        LOAD   = 7'b0000011,
        STORE  = 7'b0100011,
        OP_IMM = 7'b0010011,
        OP_RG3 = 7'b0110011
   } opcode_t;
   opcode_t OPCODE; //- define variable of new opcode type
    
   assign OPCODE = opcode_t'(opcode); //- Cast input enum 

   //- datatype for func3Symbols tied to values
   typedef enum logic [2:0] {
        //BRANCH labels
        BEQ =  3'b000,
        BNE =  3'b001,
        BLT =  3'b100,
        BGE =  3'b101,
        BLTU = 3'b110,
        BGEU = 3'b111
   } func3_t;    
   func3_t FUNC3; //- define variable of new opcode type

   assign FUNC3 = func3_t'(func3); //- Cast input enum 
       




   always_comb
   begin 
      //- schedule all values to avoid latch
      PC_SEL = 2'b00;    srcB_SEL = 2'b00;     RF_SEL = 2'b00; 
      srcA_SEL = 1'b0;   ALU_FUN  = 4'b0000;
		
      case(OPCODE)
         LUI:
         begin                   
            //PC increments
            ALU_FUN  = 4'b1001;  // calculate LUI
            srcA_SEL = 1'b1;     // U-type
            RF_SEL   = 2'b11;    // ALU result stored to reg
            srcB_SEL = 2'b00;    // done?
         end
			
         JAL:
         begin
            //ALU not used
            PC_SEL  = 2'b11     // pc jump
				RF_SEL  = 2'b00;    // pc address stored to reg
         end
			
         LOAD: 
         begin
            //PC increments
            ALU_FUN  = 4'b0000; // add to calculate address
            srcA_SEL = 1'b0;    // get value from reg
            srcB_SEL = 2'b01;   // I-type
            RF_SEL   = 2'b10;   // memory value stored to reg
         end
			
         STORE:
         begin
            //PC increments
            //Reg not being written
            ALU_FUN  = 4'b0000; // add to calculate address
            srcA_SEL = 1'b0;    // value from reg
            srcB_SEL = 2'b10;   // S-type
         end
			
         // Immediate Operations
         OP_IMM:
         begin
            srcA_SEL = 1'b0;     // get value from register
            srcB_SEL = 2'b01;    // I-type
            RF_SEL = 2'b11;      // result goes back to register
            
            case(FUNC3)
               3'b000: // instr: ADDI
               begin
                  ALU_FUN  = 4'b0000;
               end

               3'b010: // instr: SLTI
               begin
                  ALU_FUN  = 4'b0010;
               end

               3'b011: // instr: SLTIU
               begin
                  ALU_FUN  = 4'b0011;
               end

               3'b110: // instr: ORI 
               begin
                  ALU_FUN  = 4'b0110;
               end

               3'b100: // instr: XORI
               begin
                  ALU_FUN  = 4'b0100;
               end

               3'b111: // instr: ANDI
               begin
                  ALU_FUN  = 4'b0111;
               end

               3'b001: // instr: SLLI
               begin
                  ALU_FUN  = 4'b0001;
               end

               3'b101: // instr: SRLI
               begin
                  ALU_FUN  = 4'b0101;
               end

               3'b101: // instr: SRAI       (not sure what to do here since code is the same as SRLI)
               begin
                  ALU_FUN  = 4'b1101;
               end

               default: 
               begin
                  PC_SEL   = 2'b00; 
                  ALU_FUN  = 4'b0000;
                  srcA_SEL = 1'b0; 
                  srcB_SEL = 2'b00; 
                  RF_SEL   = 2'b00; 
               end
            endcase
         end


         OP_RG3:
         begin
            srcA_SEL = 1'b0;     // get first register value
            srcB_SEL = 2'b00;    // get second register value
            RF_SEL = 2'b00;      // result goes back to register
            
            case(FUNC3)
               3'b000: // instr: ADD
               begin
                  ALU_FUN  = 4'b0000;
               end

               3'b010: // instr: SLT
               begin
                  ALU_FUN  = 4'b0010;
               end

               3'b011: // instr: SLTU
               begin
                  ALU_FUN  = 4'b0011;
               end

               3'b110: // instr: OR 
               begin
                  ALU_FUN  = 4'b0110;
               end

               3'b100: // instr: XOR
               begin
                  ALU_FUN  = 4'b0100;
               end

               3'b111: // instr: AND
               begin
                  ALU_FUN  = 4'b0111;
               end

               3'b001: // instr: SLL
               begin
                  ALU_FUN  = 4'b0001;
               end

               3'b101: // instr: SRL
               begin
                  ALU_FUN  = 4'b0101;
               end

               3'b101: // instr: SRA       (not sure what to do here since code is the same as SRL)
               begin
                  ALU_FUN  = 4'b1101;
               end

               default: 
               begin
                  PC_SEL   = 2'b00; 
                  ALU_FUN  = 4'b0000;
                  srcA_SEL = 1'b0; 
                  srcB_SEL = 2'b00; 
                  RF_SEL   = 2'b00; 
               end
            endcase
         end


         default:
         begin
             PC_SEL = 2'b00; 
             srcB_SEL = 2'b00; 
             RF_SEL = 2'b00; 
             srcA_SEL = 1'b0; 
             ALU_FUN = 4'b0000;
         end
      endcase
   end
endmodule
