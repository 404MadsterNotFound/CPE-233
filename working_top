`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 01/21/2025 03:36:37 PM
// Design Name: 
// Module Name: top
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module top(
    input up,
    input clr,
    input clk,
    input reset_n,
    output [7:0] ssegs,
    output [3:0] an
    );
    wire romdA;
    wire romdB;
    wire addrROM;
    wire addrRAM;
    wire gten;
    wire [3:0] counterA;
    wire [3:0] counterB;
    wire muxdo;
    wire sclk;
    wire [13:0] data;

   // Instantiation Modules
   // NOTE: ALL PARAMETERS HAVE NOT BEEN FIXED YET
   // NEED TO SET WHICH ONES ARE SLOW CLK

   clk_2n_div_test #(.n(25)) my_DIV (
      .clockin   (clk), 
      .fclk_only (1),          
      .clockout  (sclk)   );

   cntr_up_clr_nb #(.n(4)) my_CNTRa (
      .clk   (sclk), 
      .clr   (clr), 
      .up    (up), 
      .ld    (), 
      .D     (), 
      .count (counterA), 
      .rco   (rco)   ); 
      
   ROM_16x32_exp1Na my_ROMa (
      .addr  (counterA),  
      .data  (romdA),  
      .rd_en (1)    );

   ROM_16x32_exp1Nb my_ROMb (
      .addr  (counterA),  
      .data  (romdB),  
      .rd_en (1)    );
      
   comp_nb #(.n(16)) my_COMP (
      .a  (romdA), 
      .b  (romdB), 
      .eq (), 
      .gt (gten), 
      .lt ()     );
      
    mux_2t1_nb  #(.n(4)) my_2t1_mux  (
      .SEL   (gten), 
      .D0    (romdA), 
      .D1    (romdB), 
      .D_OUT (muxdo) ); 

   cntr_up_clr_nb #(.n(4)) my_CNTRb (
      .clk   (sclk), 
      .clr   (clr), 
      .up    (upb), 
      .ld    (), 
      .D     (), 
      .count (counterB), 
      .rco   (rco)   );

   prime_num_check  my_prime (
      .start (start),
      .test  (0),
      .clk   (clk),
      .num   (muxdo),
      .DONE  (done),
      .PRIME (prime)     );          

   ram_single_port #(.n(4),.m(8)) my_ram (
      .data_in  (muxdo),  // m spec
      .addr     (counterB),  // n spec 
      .we       (we),
      .clk      (sclk),
      .data_out (data)     );  

   univ_sseg my_univ_sseg (
      .cnt1    (data), 
      .cnt2    (), 
      .valid   (1), 
      .dp_en   (an), 
      .dp_sel  (), 
      .mod_sel (), 
      .sign    (), 
      .clk     (clk), 
      .ssegs   (ssegs), 
      .disp_en (1));

endmodule
